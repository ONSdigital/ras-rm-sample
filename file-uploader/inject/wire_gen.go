// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package inject

import (
	"cloud.google.com/go/pubsub"
	"context"
	"github.com/ONSdigital/ras-rm-sample/file-uploader/config"
	"github.com/ONSdigital/ras-rm-sample/file-uploader/file"
	"github.com/sirupsen/logrus"
	"github.com/spf13/viper"
)

// Injectors from injector.go:

func Inject() file.FileProcessor {
	config := ConfigSetup()
	client := NewPubSub(config)
	fileProcessor := NewFileProcessor(config, client)
	return fileProcessor
}

// injector.go:

var FileProcessor = Inject()

func ConfigSetup() config.Config {
	viper.BindEnv("PORT", "8080")
	viper.BindEnv("PROJECT_ID", "rm-ras-sandbox")
	viper.BindEnv("TOPIC_ID", "topic")
	config2 := config.Config{
		Port: viper.GetString("PORT"),
		Pubsub: config.Pubsub{
			ProjectId: viper.GetString("PROJECT_ID"),
			TopicId:   viper.GetString("TOPIC_ID"),
		},
	}
	return config2
}

func NewFileProcessor(config2 config.Config, client pubsub.Client) file.FileProcessor {
	return file.FileProcessor{Config: config2, Client: client}
}

func NewPubSub(config2 config.Config) pubsub.Client {
	ctx := context.Background()
	client, err := pubsub.NewClient(ctx, config2.Pubsub.ProjectId)
	if err != nil {
		logrus.Fatal(err)
	}
	logrus.Info("Pubsub client created")
	return *client
}
